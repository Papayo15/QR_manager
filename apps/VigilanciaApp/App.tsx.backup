import React, { useState, useEffect } from 'react';
import {
  SafeAreaView,
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Alert,
  ScrollView,
  Image,
} from 'react-native';
import NetInfo from '@react-native-community/netinfo';
import { launchCamera } from 'react-native-image-picker';

const CONFIG = {
  BACKEND_URL: 'https://qr-manager-3z8x.onrender.com',
  SHEET_ID: '1h_fEz5tDjNmdZ-57F2CoL5W6RjjAF7Yhw4ttJgypb7o',
  DRIVE_FOLDER_ID: '1STky8uJP19p1F7mfkiPrQE5jq4yOY_no',
};

const COLORS = {
  PRIMARY: '#2196F3',
  SUCCESS: '#4CAF50',
  ERROR: '#F44336',
  BACKGROUND: '#E3F2FD',
  SURFACE: '#FFFFFF',
};

const TIPOS_TRABAJO = [
  'üöó Uber/Taxi',
  'üíä Farmacia',
  'üçï Comida',
  'üå± Jardinero',
  'üßπ Sirvienta',
  'üîß Plomero',
  '‚ö° Electricista',
  'üì¶ Paqueter√≠a',
  'üë∑ Otro',
];

interface ValidationResult {
  status: 'VALIDADO' | 'DENEGADO';
  nombre?: string;
  casa?: string;
  message?: string;
}

const getMesActual = () => {
  const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
  return meses[new Date().getMonth()];
};

const formatDate = () => new Date().toLocaleDateString('es-MX');
const formatTime = () => new Date().toLocaleTimeString('es-MX', { hour: '2-digit', minute: '2-digit', hour12: false });

const VigilanciaApp = () => {
  const [activeTab, setActiveTab] = useState<'validar' | 'trabajador'>('validar');
  const [isConnected, setIsConnected] = useState<boolean>(false);
  const [qrCode, setQrCode] = useState<string>('');
  const [validationResult, setValidationResult] = useState<ValidationResult | null>(null);
  const [counters, setCounters] = useState({ generados: 0, validados: 0, negados: 0 });
  
  // Estados para registro de trabajador
  const [nombreTrabajador, setNombreTrabajador] = useState<string>('');
  const [casaDestino, setCasaDestino] = useState<string>('');
  const [tipoTrabajo, setTipoTrabajo] = useState<string>('');
  const [fotoINE, setFotoINE] = useState<any>(null);
  const [fotoPreview, setFotoPreview] = useState<string | null>(null);

  useEffect(() => {
    const unsubscribe = NetInfo.addEventListener(state => setIsConnected(state.isConnected ?? false));
    loadCounters();
    return () => unsubscribe();
  }, []);

  const loadCounters = async () => {
    try {
      const response = await fetch(`${CONFIG.BACKEND_URL}/api/counters?sheetId=${CONFIG.SHEET_ID}`);
      if (response.ok) {
        const data = await response.json();
        setCounters(data);
      }
    } catch (error) {
      console.error('Error cargando contadores:', error);
    }
  };

  const validateQR = async () => {
    if (qrCode.length !== 6) return;
    try {
      const response = await fetch(`${CONFIG.BACKEND_URL}/api/validate-qr`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          sheetId: CONFIG.SHEET_ID, 
          codigo: qrCode.toUpperCase() 
        })
      });
      const result: ValidationResult = await response.json();
      setValidationResult(result);
      
      if (result.status === 'VALIDADO') {
        setCounters(prev => ({ ...prev, validados: prev.validados + 1 }));
      } else {
        setCounters(prev => ({ ...prev, negados: prev.negados + 1 }));
      }

      setTimeout(() => { setQrCode(''); setValidationResult(null); }, 5000);
    } catch (error) {
      Alert.alert('Error', 'Error de conexi√≥n');
    }
  };

  const handleTakePhoto = () => {
    launchCamera(
      { 
        mediaType: 'photo', 
        quality: 0.7,
        saveToPhotos: false,
      },
      (response) => {
        if (response.didCancel) return;
        if (response.errorCode) {
          Alert.alert('Error', 'No se pudo tomar la foto');
          return;
        }
        if (response.assets && response.assets[0]) {
          const photo = response.assets[0];
          setFotoPreview(photo.uri || null);
          setFotoINE(photo);
        }
      }
    );
  };

  const handleRegistrarTrabajador = async () => {
    if (!nombreTrabajador.trim() || !casaDestino.trim() || !tipoTrabajo || !fotoINE) {
      Alert.alert('Error', 'Completa todos los campos obligatorios');
      return;
    }

    const numeroCasa = parseInt(casaDestino);
    if (isNaN(numeroCasa) || numeroCasa < 1 || numeroCasa > 100) {
      Alert.alert('Error', 'N√∫mero de casa debe estar entre 1 y 100');
      return;
    }

    try {
      const mes = getMesActual();
      const a√±o = new Date().getFullYear();
      const timestamp = new Date().getTime();
      const sheetName = `Trabajadores_Casa_${casaDestino.padStart(3, '0')}_${mes}_${a√±o}`;

      // Simular subida de foto (en producci√≥n subir√≠as a Google Drive)
      const fotoURL = `drive://Casa_${casaDestino.padStart(3, '0')}/${a√±o}/${mes}/INE_${timestamp}.jpg`;

      const response = await fetch(`${CONFIG.BACKEND_URL}/api/register-worker`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          sheetId: CONFIG.SHEET_ID,
          sheetName: sheetName,
          tipo: 'TRABAJADOR',
          trabajador: nombreTrabajador.trim(),
          tipo_servicio: tipoTrabajo,
          casa: casaDestino,
          foto_url: fotoURL,
          fecha: formatDate(),
          hora: formatTime(),
          mes: mes,
          a√±o: a√±o,
        })
      });

      if (!response.ok) throw new Error('Error');

      Alert.alert('‚úÖ √âxito', 'Trabajador registrado correctamente');
      
      // Limpiar formulario
      setNombreTrabajador('');
      setCasaDestino('');
      setTipoTrabajo('');
      setFotoINE(null);
      setFotoPreview(null);
    } catch (error) {
      Alert.alert('Error', 'No se pudo registrar al trabajador');
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>üõ°Ô∏è VIGILANCIAAPP</Text>
        <View style={[styles.status, isConnected ? styles.online : styles.offline]}>
          <Text>{isConnected ? 'üü¢ En l√≠nea' : 'üî¥ Sin conexi√≥n'}</Text>
        </View>
      </View>

      <View style={styles.tabs}>
        <TouchableOpacity 
          style={[styles.tab, activeTab === 'validar' && styles.tabActive]} 
          onPress={() => setActiveTab('validar')}
        >
          <Text style={[styles.tabText, activeTab === 'validar' && styles.tabTextActive]}>
            Validar QR
          </Text>
        </TouchableOpacity>
        <TouchableOpacity 
          style={[styles.tab, activeTab === 'trabajador' && styles.tabActive]} 
          onPress={() => setActiveTab('trabajador')}
        >
          <Text style={[styles.tabText, activeTab === 'trabajador' && styles.tabTextActive]}>
            Registro INE
          </Text>
        </TouchableOpacity>
      </View>

      <ScrollView style={styles.content}>
        {activeTab === 'validar' && (
          <View>
            <View style={styles.countersContainer}>
              <View style={styles.counterBox}>
                <Text style={styles.counterNumber}>{counters.generados}</Text>
                <Text>üîµ Generados</Text>
              </View>
              <View style={styles.counterBox}>
                <Text style={styles.counterNumber}>{counters.validados}</Text>
                <Text>üü¢ Validados</Text>
              </View>
              <View style={styles.counterBox}>
                <Text style={styles.counterNumber}>{counters.negados}</Text>
                <Text>üî¥ Negados</Text>
              </View>
            </View>

            <View style={styles.card}>
              <Text style={styles.label}>C√≥digo QR (6 caracteres)</Text>
              <TextInput
                style={styles.qrInput}
                value={qrCode}
                onChangeText={(text) => {
                  const val = text.toUpperCase().slice(0, 6);
                  setQrCode(val);
                  if (val.length === 6) setTimeout(() => validateQR(), 100);
                }}
                placeholder="ABC123"
                maxLength={6}
                autoCapitalize="characters"
              />
            </View>

            {validationResult && (
              <View style={[styles.resultCard, validationResult.status === 'VALIDADO' ? styles.resultSuccess : styles.resultError]}>
                <Text style={styles.resultTitle}>
                  {validationResult.status === 'VALIDADO' ? '‚úÖ ACCESO PERMITIDO' : '‚ùå ACCESO DENEGADO'}
                </Text>
                {validationResult.status === 'VALIDADO' && validationResult.nombre && validationResult.casa && (
                  <>
                    <Text style={styles.resultText}>üë§ Visitante: {validationResult.nombre}</Text>
                    <Text style={styles.resultText}>üè† Casa: {validationResult.casa}</Text>
                  </>
                )}
                {validationResult.message && <Text>{validationResult.message}</Text>}
              </View>
            )}
          </View>
        )}

        {activeTab === 'trabajador' && (
          <View style={styles.card}>
            <Text style={styles.sectionTitle}>üì∏ Registro de INE</Text>
            
            <Text style={styles.label}>Nombre Completo *</Text>
            <TextInput
              style={styles.input}
              value={nombreTrabajador}
              onChangeText={setNombreTrabajador}
              placeholder="Juan P√©rez Garc√≠a"
            />

            <Text style={styles.label}>Casa de Destino (1-100) *</Text>
            <TextInput
              style={styles.input}
              value={casaDestino}
              onChangeText={setCasaDestino}
              placeholder="45"
              keyboardType="number-pad"
              maxLength={3}
            />

            <Text style={styles.label}>Tipo de Servicio *</Text>
            <View style={styles.servicesContainer}>
              {TIPOS_TRABAJO.map((tipo) => (
                <TouchableOpacity
                  key={tipo}
                  style={[styles.serviceChip, tipoTrabajo === tipo && styles.serviceChipActive]}
                  onPress={() => setTipoTrabajo(tipo)}
                >
                  <Text style={[styles.serviceChipText, tipoTrabajo === tipo && styles.serviceChipTextActive]}>
                    {tipo}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>

            <Text style={styles.label}>Foto del INE *</Text>
            <TouchableOpacity style={styles.photoButton} onPress={handleTakePhoto}>
              <Text style={styles.photoButtonText}>üì∑ Tomar Foto</Text>
            </TouchableOpacity>

            {fotoPreview && (
              <Image source={{ uri: fotoPreview }} style={styles.photoPreview} />
            )}

            <TouchableOpacity 
              style={[styles.submitButton, (!nombreTrabajador || !casaDestino || !tipoTrabajo || !fotoINE) && styles.submitButtonDisabled]}
              onPress={handleRegistrarTrabajador}
              disabled={!nombreTrabajador || !casaDestino || !tipoTrabajo || !fotoINE}
            >
              <Text style={styles.submitButtonText}>‚úÖ Registrar Trabajador</Text>
            </TouchableOpacity>
          </View>
        )}
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: COLORS.BACKGROUND },
  header: { backgroundColor: COLORS.SURFACE, padding: 20 },
  title: { fontSize: 24, fontWeight: 'bold', textAlign: 'center', marginBottom: 12 },
  status: { paddingHorizontal: 12, paddingVertical: 6, borderRadius: 16, alignSelf: 'center' },
  online: { backgroundColor: '#E8F5E9' },
  offline: { backgroundColor: '#FFEBEE' },
  tabs: { flexDirection: 'row', backgroundColor: COLORS.SURFACE },
  tab: { flex: 1, paddingVertical: 12, alignItems: 'center', backgroundColor: '#E0E0E0' },
  tabActive: { backgroundColor: COLORS.PRIMARY },
  tabText: { fontSize: 16, fontWeight: '600', color: '#616161' },
  tabTextActive: { color: '#FFF' },
  content: { flex: 1, padding: 16 },
  countersContainer: { flexDirection: 'row', justifyContent: 'space-between', marginBottom: 16 },
  counterBox: { flex: 1, backgroundColor: COLORS.SURFACE, borderRadius: 8, padding: 16, marginHorizontal: 4, alignItems: 'center' },
  counterNumber: { fontSize: 32, fontWeight: 'bold', color: COLORS.PRIMARY },
  card: { backgroundColor: COLORS.SURFACE, borderRadius: 12, padding: 20 },
  sectionTitle: { fontSize: 20, fontWeight: 'bold', marginBottom: 16, textAlign: 'center' },
  label: { fontSize: 16, fontWeight: '600', marginBottom: 8, marginTop: 12 },
  input: { borderWidth: 1, borderColor: '#90CAF9', borderRadius: 8, padding: 12, marginBottom: 12, backgroundColor: '#FFF' },
  qrInput: { borderWidth: 2, borderColor: '#90CAF9', borderRadius: 8, padding: 12, fontSize: 24, fontWeight: 'bold', textAlign: 'center', letterSpacing: 4 },
  resultCard: { borderRadius: 12, padding: 20, marginTop: 16, borderWidth: 2 },
  resultSuccess: { backgroundColor: '#E8F5E9', borderColor: COLORS.SUCCESS },
  resultError: { backgroundColor: '#FFEBEE', borderColor: COLORS.ERROR },
  resultTitle: { fontSize: 20, fontWeight: 'bold', marginBottom: 12, textAlign: 'center' },
  resultText: { fontSize: 16, marginBottom: 8 },
  servicesContainer: { flexDirection: 'row', flexWrap: 'wrap', marginBottom: 16 },
  serviceChip: { backgroundColor: '#F5F5F5', paddingHorizontal: 12, paddingVertical: 8, borderRadius: 16, marginRight: 8, marginBottom: 8, borderWidth: 1, borderColor: '#E0E0E0' },
  serviceChipActive: { backgroundColor: COLORS.PRIMARY, borderColor: COLORS.PRIMARY },
  serviceChipText: { fontSize: 14, color: '#616161' },
  serviceChipTextActive: { color: '#FFF', fontWeight: '600' },
  photoButton: { backgroundColor: COLORS.PRIMARY, padding: 14, borderRadius: 8, alignItems: 'center', marginBottom: 12 },
  photoButtonText: { color: '#FFF', fontSize: 16, fontWeight: '600' },
  photoPreview: { width: '100%', height: 200, borderRadius: 8, marginBottom: 16, resizeMode: 'cover' },
  submitButton: { backgroundColor: COLORS.SUCCESS, padding: 16, borderRadius: 8, alignItems: 'center', marginTop: 16 },
  submitButtonDisabled: { backgroundColor: '#BDBDBD', opacity: 0.6 },
  submitButtonText: { color: '#FFF', fontSize: 18, fontWeight: 'bold' },
});

export default VigilanciaApp;
