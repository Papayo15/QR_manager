import React, { useState, useEffect } from 'react';
import {
  SafeAreaView,
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Alert,
  ScrollView,
  FlatList,
  Modal,
} from 'react-native';
import QRCode from 'react-native-qrcode-svg';
import AsyncStorage from '@react-native-async-storage/async-storage';
import NetInfo from '@react-native-community/netinfo';
import Share from 'react-native-share';

const CONFIG = {
  BACKEND_URL: 'https://qr-manager-3z8x.onrender.com',
  ALPHA_CODE_LENGTH: 6,
  SHEET_ID: '1h_fEz5tDjNmdZ-57F2CoL5W6RjjAF7Yhw4ttJgypb7o',
};

const COLORS = {
  PRIMARY: '#4CAF50',
  BACKGROUND: '#F1F8E9',
  SURFACE: '#FFFFFF',
  BORDER: '#C5E1A5',
  ERROR: '#F44336',
};

interface CodigoQR {
  code: string;
  visitante: string;
  casa: string;
  fecha: string;
  hora: string;
  residente: string;
}

const formatDate = () => new Date().toLocaleDateString('es-MX');
const formatTime = () => new Date().toLocaleTimeString('es-MX', { hour: '2-digit', minute: '2-digit', hour12: false });
const getMesActual = () => {
  const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
  return meses[new Date().getMonth()];
};

const generateCode = (): string => {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let code = '';
  for (let i = 0; i < CONFIG.ALPHA_CODE_LENGTH; i++) {
    code += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return code;
};

const ResidenteApp = () => {
  // Estados principales
  const [isConnected, setIsConnected] = useState<boolean>(false);
  const [loading, setLoading] = useState<boolean>(false);
  const [casaResidente, setCasaResidente] = useState<string>('');
  const [nombreResidente, setNombreResidente] = useState<string>('');
  const [isRegistered, setIsRegistered] = useState<boolean>(false);
  
  // Estados del formulario
  const [visitante, setVisitante] = useState<string>('');
  const [generatedCode, setGeneratedCode] = useState<CodigoQR | null>(null);
  const [historialCodigos, setHistorialCodigos] = useState<CodigoQR[]>([]);
  const [showHistory, setShowHistory] = useState<boolean>(false);

  useEffect(() => {
    const unsubscribe = NetInfo.addEventListener(state => {
      setIsConnected(state.isConnected ?? false);
    });
    checkRegistration();
    return () => unsubscribe();
  }, []);

  useEffect(() => {
    if (isRegistered && casaResidente) {
      loadHistorial();
    }
  }, [isRegistered, casaResidente]);

  const checkRegistration = async () => {
    try {
      const casa = await AsyncStorage.getItem('casaResidente');
      const nombre = await AsyncStorage.getItem('nombreResidente');
      if (casa && nombre) {
        setCasaResidente(casa);
        setNombreResidente(nombre);
        setIsRegistered(true);
      }
    } catch (error) {
      console.error('Error verificando registro:', error);
    }
  };

  const handleRegister = async () => {
    if (!casaResidente.trim() || !nombreResidente.trim()) {
      Alert.alert('Error', 'Completa todos los campos');
      return;
    }

    const numeroCasa = parseInt(casaResidente);
    if (isNaN(numeroCasa) || numeroCasa < 1 || numeroCasa > 100) {
      Alert.alert('Error', 'Número de casa debe estar entre 1 y 100');
      return;
    }

    try {
      await AsyncStorage.setItem('casaResidente', casaResidente.trim());
      await AsyncStorage.setItem('nombreResidente', nombreResidente.trim());
      setIsRegistered(true);
      Alert.alert('✅ Registro Exitoso', `Bienvenido, Casa ${casaResidente}`);
    } catch (error) {
      Alert.alert('Error', 'No se pudo guardar el registro');
    }
  };

  const loadHistorial = async () => {
    try {
      const mes = getMesActual();
      const año = new Date().getFullYear();
      const sheetName = `Registros_Casa_${casaResidente.padStart(3, '0')}_${mes}_${año}`;
      
      const response = await fetch(`${CONFIG.BACKEND_URL}/api/get-history?sheetId=${CONFIG.SHEET_ID}&sheetName=${sheetName}&casa=${casaResidente}`);
      
      if (response.ok) {
        const data = await response.json();
        setHistorialCodigos(data.slice(0, 5)); // Últimos 5
      }
    } catch (error) {
      console.error('Error cargando historial:', error);
    }
  };

  const handleGenerateCode = async () => {
    if (!visitante.trim()) {
      Alert.alert('Error', 'Ingresa el nombre del visitante');
      return;
    }

    setLoading(true);
    try {
      const code = generateCode();
      const mes = getMesActual();
      const año = new Date().getFullYear();
      const sheetName = `Registros_Casa_${casaResidente.padStart(3, '0')}_${mes}_${año}`;
      
      const response = await fetch(CONFIG.BACKEND_URL + '/api/register-code', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          sheetId: CONFIG.SHEET_ID,
          sheetName: sheetName,
          tipo: 'CODIGO_QR',
          codigo: code,
          visitante: visitante.trim(),
          residente: nombreResidente,
          casa: casaResidente,
          fecha: formatDate(),
          hora: formatTime(),
          resultado: 'ACTIVO',
          mes: mes,
          año: año,
        })
      });

      if (!response.ok) throw new Error('Error');

      const codeData: CodigoQR = {
        code,
        visitante: visitante.trim(),
        casa: casaResidente,
        fecha: formatDate(),
        hora: formatTime(),
        residente: nombreResidente,
      };

      setGeneratedCode(codeData);
      setVisitante('');
      loadHistorial(); // Recargar historial
      Alert.alert('✅ Código Generado', `Código: ${code}\nVálido por 24 horas`);
    } catch (error) {
      Alert.alert('Error', 'No se pudo generar el código');
    } finally {
      setLoading(false);
    }
  };

  const handleShareWhatsApp = async (codigo: CodigoQR) => {
    const mensaje = `🏠 *CÓDIGO DE ACCESO*\n\n` +
      `📋 Código: *${codigo.code}*\n` +
      `👤 Visitante: ${codigo.visitante}\n` +
      `🏡 Casa: ${codigo.casa}\n` +
      `📅 Fecha: ${codigo.fecha}\n` +
      `🕐 Hora: ${codigo.hora}\n\n` +
      `⚠️ *Válido por 24 horas*\n` +
      `Muestra este código en la caseta de vigilancia`;

    try {
      await Share.open({
        message: mensaje,
        social: Share.Social.WHATSAPP,
      });
    } catch (error) {
      Alert.alert('Info', 'Comparte el código manualmente');
    }
  };

  const handleLogout = async () => {
    Alert.alert(
      'Cerrar Sesión',
      '¿Estás seguro de cerrar sesión?',
      [
        { text: 'Cancelar', style: 'cancel' },
        {
          text: 'Sí, cerrar',
          onPress: async () => {
            await AsyncStorage.removeItem('casaResidente');
            await AsyncStorage.removeItem('nombreResidente');
            setIsRegistered(false);
            setCasaResidente('');
            setNombreResidente('');
            setHistorialCodigos([]);
            setGeneratedCode(null);
          }
        }
      ]
    );
  };

  // PANTALLA DE REGISTRO
  if (!isRegistered) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.header}>
          <Text style={styles.title}>🏠 Registro de Residente</Text>
        </View>
        <View style={styles.content}>
          <Text style={styles.label}>Tu Nombre Completo *</Text>
          <TextInput
            style={styles.input}
            value={nombreResidente}
            onChangeText={setNombreResidente}
            placeholder="Juan Pérez"
          />

          <Text style={styles.label}>Número de Casa (1-100) *</Text>
          <TextInput
            style={styles.input}
            value={casaResidente}
            onChangeText={setCasaResidente}
            placeholder="45"
            keyboardType="number-pad"
            maxLength={3}
          />

          <TouchableOpacity style={styles.button} onPress={handleRegister}>
            <Text style={styles.buttonText}>✅ Registrarme</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  // PANTALLA PRINCIPAL
  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>🏠 Generador QR</Text>
        <Text style={styles.subtitle}>Casa {casaResidente} - {nombreResidente}</Text>
        <View style={styles.headerButtons}>
          <TouchableOpacity onPress={() => setShowHistory(true)} style={styles.historyButton}>
            <Text>📋 Historial</Text>
          </TouchableOpacity>
          <TouchableOpacity onPress={handleLogout} style={styles.logoutButton}>
            <Text>🚪 Salir</Text>
          </TouchableOpacity>
        </View>
      </View>

      <ScrollView style={styles.content}>
        <Text style={styles.label}>Nombre del Visitante *</Text>
        <TextInput
          style={styles.input}
          value={visitante}
          onChangeText={setVisitante}
          placeholder="Nombre completo"
        />

        <TouchableOpacity
          style={[styles.button, loading && styles.buttonDisabled]}
          onPress={handleGenerateCode}
          disabled={loading}
        >
          <Text style={styles.buttonText}>{loading ? '⏳ Generando...' : '✨ Generar Código'}</Text>
        </TouchableOpacity>

        {generatedCode && (
          <View style={styles.codeSection}>
            <Text style={styles.sectionTitle}>✅ Código Generado</Text>
            <View style={styles.qrContainer}>
              <QRCode value={generatedCode.code} size={200} />
            </View>
            <Text style={styles.codeText}>{generatedCode.code}</Text>
            <Text>👤 Visitante: {generatedCode.visitante}</Text>
            <Text>🏠 Casa: {generatedCode.casa}</Text>
            <Text>📅 {generatedCode.fecha} - {generatedCode.hora}</Text>
            
            <TouchableOpacity
              style={styles.whatsappButton}
              onPress={() => handleShareWhatsApp(generatedCode)}
            >
              <Text style={styles.whatsappButtonText}>📱 Compartir por WhatsApp</Text>
            </TouchableOpacity>
          </View>
        )}
      </ScrollView>

      {/* MODAL DE HISTORIAL */}
      <Modal visible={showHistory} animationType="slide" transparent={true}>
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>📋 Últimos 5 Códigos</Text>
            <FlatList
              data={historialCodigos}
              keyExtractor={(item, index) => index.toString()}
              renderItem={({ item }) => (
                <View style={styles.historyItem}>
                  <Text style={styles.historyCode}>{item.code}</Text>
                  <Text>👤 {item.visitante}</Text>
                  <Text>📅 {item.fecha} - {item.hora}</Text>
                </View>
              )}
              ListEmptyComponent={<Text style={styles.emptyText}>No hay códigos generados</Text>}
            />
            <TouchableOpacity style={styles.closeButton} onPress={() => setShowHistory(false)}>
              <Text style={styles.closeButtonText}>Cerrar</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: COLORS.BACKGROUND },
  header: { backgroundColor: COLORS.SURFACE, padding: 20 },
  title: { fontSize: 24, fontWeight: 'bold', textAlign: 'center' },
  subtitle: { fontSize: 16, textAlign: 'center', marginTop: 8, color: '#555' },
  headerButtons: { flexDirection: 'row', justifyContent: 'space-around', marginTop: 12 },
  historyButton: { backgroundColor: '#E3F2FD', padding: 10, borderRadius: 8 },
  logoutButton: { backgroundColor: '#FFEBEE', padding: 10, borderRadius: 8 },
  content: { flex: 1, padding: 20 },
  label: { fontSize: 16, fontWeight: '600', marginBottom: 8, marginTop: 12 },
  input: { borderWidth: 1, borderColor: COLORS.BORDER, borderRadius: 8, padding: 12, backgroundColor: COLORS.SURFACE },
  button: { backgroundColor: COLORS.PRIMARY, padding: 14, borderRadius: 8, alignItems: 'center', marginTop: 20 },
  buttonDisabled: { opacity: 0.5 },
  buttonText: { color: '#FFF', fontSize: 16, fontWeight: '600' },
  codeSection: { backgroundColor: COLORS.SURFACE, borderRadius: 12, padding: 20, marginTop: 20 },
  sectionTitle: { fontSize: 20, fontWeight: 'bold', textAlign: 'center', marginBottom: 16 },
  qrContainer: { alignItems: 'center', padding: 20 },
  codeText: { fontSize: 32, fontWeight: 'bold', color: COLORS.PRIMARY, textAlign: 'center', marginBottom: 12, letterSpacing: 4 },
  whatsappButton: { backgroundColor: '#25D366', padding: 14, borderRadius: 8, alignItems: 'center', marginTop: 16 },
  whatsappButtonText: { color: '#FFF', fontSize: 16, fontWeight: '600' },
  modalContainer: { flex: 1, backgroundColor: 'rgba(0,0,0,0.5)', justifyContent: 'center', padding: 20 },
  modalContent: { backgroundColor: COLORS.SURFACE, borderRadius: 12, padding: 20, maxHeight: '80%' },
  modalTitle: { fontSize: 20, fontWeight: 'bold', marginBottom: 16, textAlign: 'center' },
  historyItem: { backgroundColor: COLORS.BACKGROUND, padding: 12, borderRadius: 8, marginBottom: 12 },
  historyCode: { fontSize: 20, fontWeight: 'bold', color: COLORS.PRIMARY },
  emptyText: { textAlign: 'center', padding: 20, color: '#999' },
  closeButton: { backgroundColor: COLORS.PRIMARY, padding: 14, borderRadius: 8, alignItems: 'center', marginTop: 16 },
  closeButtonText: { color: '#FFF', fontSize: 16, fontWeight: '600' },
});

export default ResidenteApp;
